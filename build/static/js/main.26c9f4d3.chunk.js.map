{"version":3,"sources":["logo.svg","utils/api.js","components/DataBody.js","components/DataTable.js","components/DataArea.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","get","DataBody","users","undefined","name","map","login","picture","phone","email","dob","key","uuid","data-th","className","src","medium","alt","first","last","href","target","date","dateArray","split","year","join","formatDate","DataTable","headings","console","log","DataArea","state","API","then","results","data","setState","this","Component","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,kKCE5B,EACD,WACN,OAAOC,IAAMC,IAAI,kDC+CVC,MAjDf,YAA8B,IAAVC,EAAS,EAATA,MAWlB,OACE,oCACgBC,IAAbD,EAAM,SAAsCC,IAAlBD,EAAM,GAAGE,KAElCF,EAAMG,KAAI,YAAkD,IAA/CC,EAA8C,EAA9CA,MAAOF,EAAuC,EAAvCA,KAAMG,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC/C,OACE,wBAAIC,IAAKL,EAAMM,MACb,wBAAIC,UAAQ,QAAQC,UAAU,gBAC5B,yBACEC,IAAKR,EAAQS,OACbC,IAAK,qBAAuBb,EAAKc,MAAQ,IAAMd,EAAKe,KACpDL,UAAU,oBAGd,wBAAID,UAAQ,OAAOC,UAAU,0BAC1BV,EAAKc,MADR,IACgBd,EAAKe,MAErB,wBAAIN,UAAQ,QAAQC,UAAU,gBAC3BN,GAEH,wBAAIK,UAAQ,QAAQC,UAAU,gBAC5B,uBAAGM,KAAM,UAAYX,EAAOY,OAAO,WAChCZ,IAGL,wBAAII,UAAQ,MAAMC,UAAU,gBAnCxC,SAAoBQ,GAClB,IAAMC,EAAYD,EAAKE,MAAM,KACvBC,EAAOF,EAAU,GAKvB,MADsB,CAHRA,EAAU,GACPA,EAAU,GAAGC,MAAM,KACf,GACcC,GAAMC,KAAK,KA8BjCC,CAAWjB,EAAIY,WAMxB,uCCXOM,MA/Bf,YAAuC,IAAnBC,EAAkB,EAAlBA,SAAU3B,EAAQ,EAARA,MAG1B,OAFA4B,QAAQC,IAAIF,GAGR,oCACI,+BACI,+BACI,4BACKA,EAASxB,KAAI,YAAa,IAAXD,EAAU,EAAVA,KACZ,OACI,wBACIO,IAAKP,GAEJA,QAOrB,kBAAC,EAAD,CAEAF,MAAOA,OChBF8B,E,kDACjB,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACT/B,MAAM,CAAC,IACP2B,SACI,CACI,CAACzB,KAAM,SACP,CAACA,KAAM,QACP,CAACA,KAAM,SACP,CAACA,KAAM,SACP,CAACA,KAAM,SAVT,E,gEAcO,IAAD,OAChB8B,IAAeC,MAAK,SAAAC,GAChBN,QAAQC,IAAIK,GACZN,QAAQC,IAAIK,EAAQC,KAAKD,QAAQ,IACjC,EAAKE,SAAS,CACVpC,MAAOkC,EAAQC,KAAKD,e,+BAQ5B,OACI,oCACI,kBAAC,EAAD,CACAP,SAAUU,KAAKN,MAAMJ,SACrB3B,MAAOqC,KAAKN,MAAM/B,a,GAhCIsC,aCNjBC,E,uKAGb,OACI,oCACI,kBAAC,EAAD,W,GALkBD,aCUnBE,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCIc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.26c9f4d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\n\nexport default {\n    getUsers: function() {\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\n    }\n};\n","import React from \"react\";\n\nfunction DataBody({ users }) {\n  function formatDate(date) {\n    const dateArray = date.split(\"-\");\n    const year = dateArray[0];\n    const month = dateArray[1];\n    const dayArray = dateArray[2].split(\"T\");\n    const day = dayArray[0];\n    const formattedDate = [month, day, year].join(\"-\");\n    return formattedDate;\n  }\n\n  return (\n    <tbody>\n      {users[0] !== undefined && users[0].name !== undefined ? (\n        \n        users.map(({ login, name, picture, phone, email, dob }) => {\n          return (\n            <tr key={login.uuid}>\n              <td data-th=\"Image\" className=\"align-middle\">\n                <img\n                  src={picture.medium}\n                  alt={\"profile image for \" + name.first + \" \" + name.last}\n                  className=\"img-responsive\"\n                />\n              </td>\n              <td data-th=\"Name\" className=\"name-cell align-middle\">\n                {name.first} {name.last}\n              </td>\n              <td data-th=\"Phone\" className=\"align-middle\">\n                {phone}\n              </td>\n              <td data-th=\"Email\" className=\"align-middle\">\n                <a href={\"mailto:\" + email} target=\"__blank\">\n                  {email}\n                </a>\n              </td>\n              <td data-th=\"DOB\" className=\"align-middle\">\n                {formatDate(dob.date)}\n              </td>\n            </tr>\n          );\n        })\n      ) : (\n        <></>\n      )}\n    </tbody>\n  );\n}\n\nexport default DataBody;\n","import React from 'react';\nimport DataBody from './DataBody';\n\nfunction DataTable({headings, users}) {\n    console.log(headings)\n    \n    return (\n        <>\n            <table>\n                <thead>\n                    <tr>\n                        {headings.map(({name}) => {\n                            return (\n                                <th\n                                    key={name}\n                                >\n                                    {name}\n                                </th>\n                            )\n                        } )}\n                    </tr>\n                </thead>\n\n                <DataBody\n                \n                users={users}\n                />\n                \n            </table>\n\n        </>\n    )\n}\n\nexport default DataTable\n","// this makes the API call for us at the URL\n// puts the users in some kind of list\n// handles the search box\n// \"mount\" means \"loaded\"\n\nimport React, {Component} from 'react';\nimport API from '../utils/api.js';\nimport DataTable from './DataTable';\n\nexport default class DataArea extends Component{\n    constructor() {\n        super();\n        this.state = {\n            users:[{}],\n            headings:\n                [\n                    {name: \"image\"},\n                    {name: \"name\"},\n                    {name: \"phone\"},\n                    {name: \"email\"},\n                    {name: \"dob\"}\n                ]\n        }\n    }\n    componentDidMount() {\n        API.getUsers().then(results => {\n            console.log(results)\n            console.log(results.data.results[0])\n            this.setState({\n                users: results.data.results\n            })\n            // console.log(results.data.results[0].name)\n            // console.log(results.data.results[0].name.first + \" \" + results.data.results[0].name.last)\n        }) \n    }\n\n    render() {\n        return (\n            <>\n                <DataTable\n                headings={this.state.headings}\n                users={this.state.users}\n                />\n            </>\n        )\n    }\n}","import React, {Component} from 'react';\nimport DataArea from '../DataArea.js';\n\nexport default class Main extends Component{\n\n    render() {\n        return (\n            <>\n                <DataArea />\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main/';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}